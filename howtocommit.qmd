# How to commit

#### The commit type can include the following:

-   `feat` – a new feature is introduced with the changes
-   `fix` – a bug fix has occurred
-   `chore` – changes that do not relate to a fix or feature and don't modify source or test files (for example updating dependencies)
-   `refactor` – refactored code that neither fixes a bug nor adds a feature
-   `docs` – updates to documentation such as a the README or other markdown files
-   `style` – changes that do not affect the meaning of the code, likely related to code formatting such as white-space, missing semi-colons, and so on.
-   `test` – including new or correcting previous tests
-   `perf` – performance improvements
-   `ci` – continuous integration related
-   `build` – changes that affect the build system or external dependencies
-   `revert` – reverts a previous commit

#### style
Answer this questions in a DIRECT, CLEAR style, no more than 60 words. No ending in POINT, "."

#### add BREAKING CHANGE OR MINOR CHANGE

> **BREAKING CHANGE:** a commit that has a `BREAKING CHANGE:`, or appends a `!` after the type/scope, introduces a breaking API change (correlating with [`MAJOR`](http://semver.org/#summary) in Semantic Versioning). A BREAKING CHANGE can be part of commits of any _type_.

## references


url: https://commitizen-tools.github.io/commitizen


```cardlink
url: https://www.conventionalcommits.org/en/v1.0.0/
title: "Conventional Commits"
description: "A specification for adding human and machine readable meaning to commit messages"
host: www.conventionalcommits.org
```

```cardlink
url: https://semver.org/
title: "Semantic Versioning 2.0.0"
description: "Semantic Versioning spec and website"
host: semver.org
```
